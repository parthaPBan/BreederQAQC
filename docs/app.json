[{"name":"app.R","content":"##### Setup =====\r\nlibrary(reformulas)\r\n#declaring the pipeline operator instead of loading package to use the function\r\n'%>%' <- magrittr::`%>%`\r\n\r\n#UI------------------------------------\r\nui <-\r\n  bslib::page_navbar(\r\n    theme =bslib::bs_theme(bootswatch = \"superhero\"),\r\n    title = \"BreederQ\",\r\n    bslib::nav_panel( #Data upload page ----\r\n                      \"Data Upload\",\r\n                      bslib::layout_sidebar(\r\n                        sidebar =  bslib::sidebar(\r\n                          shiny::fileInput(inputId = \"upload\", \"upload\", accept = c(\".csv\", \".tsv\")),\r\n                          shiny::tags$br(),\r\n                          shiny::selectInput(inputId = \"stage_upload\",label = \"Stage\", choices = NULL),\r\n                          shiny::selectInput(inputId = 'trait_upload', label = \"Trait\", choices = NULL)\r\n                        ),\r\n                        bslib::card(\r\n                          DT::dataTableOutput(\"summary\")\r\n                        )\r\n                      )\r\n    ),\r\n    bslib::nav_panel( #LQI page ----\r\n                      \"LQI\",\r\n                      bslib::layout_sidebar(\r\n                        sidebar = bslib::sidebar(\r\n                          shiny::selectInput(inputId = \"stage_lqi\",label = \"Stage\", choices = NULL),\r\n                          shiny::selectInput(inputId = \"block_lqi\", label = \"Block\", choices = NULL),\r\n                          shiny::selectInput(inputId = 'trait_lqi', label = \"Trait\", choices = NULL)\r\n                        ),\r\n                        bslib::card(\r\n                          bslib::card_header(\"Some viz -- lated\"),\r\n                          shiny::plotOutput(\"lqi_plot\")\r\n                        )\r\n                      )\r\n    ),\r\n    bslib::nav_panel( #Plot QAQC page----\r\n                      \"QAQC\",\r\n                      bslib::layout_sidebar(\r\n                        sidebar = bslib::sidebar(\r\n                          shiny::selectInput(inputId = \"stage\",label = \"Stage\", choices = NULL),\r\n                          shiny::selectInput(inputId = \"block\", label = \"Block\", choices = NULL),\r\n                          shiny::selectInput(inputId = 'trait', label = \"Trait\", choices = NULL),\r\n                          shiny::actionButton(inputId= \"reset\", label = \"Reset Plots\"),\r\n                          shiny::actionButton(inputId= \"save\", label = \"Save\"),\r\n                          shiny::actionButton(inputId= \"remove\", label = \"Remove Decision\")\r\n                        ),\r\n                        bslib::layout_columns(\r\n                          bslib::card(\r\n                            fill= FALSE,\r\n                            shiny::plotOutput(\"residual\", \r\n                                              height = \"200px\", \r\n                                              width= \"100%\")\r\n                          ),\r\n                          bslib::card(\r\n                            fill = FALSE,\r\n                            shiny::plotOutput(\"cooksd\", \r\n                                              click = shiny::clickOpts(id= \"plot_click\"),\r\n                                              height = \"200px\", \r\n                                              width= \"100%\")\r\n                          ), \r\n                          bslib::card(\r\n                            fill = FALSE,\r\n                            shiny::plotOutput(\"obs_fit\", \r\n                                              height = \"200px\", \r\n                                              width= \"100%\")\r\n                          )\r\n                        ),\r\n                        bslib::layout_columns(\r\n                          bslib::card(\r\n                            fill = FALSE,\r\n                            shiny::plotOutput(\"raw_data_1\", \r\n                                              height = \"260px\", \r\n                                              width= \"100%\")\r\n                          ),\r\n                          bslib::card(\r\n                            fill = FALSE,\r\n                            shiny::plotOutput(\"raw_data_2\", \r\n                                              height = \"260px\", \r\n                                              width= \"100%\")\r\n                          )\r\n                        )\r\n                      )\r\n    ),\r\n    bslib::nav_panel( #Set level QAQC page----\r\n                      \"Set QAQC\",\r\n                      bslib::layout_sidebar(\r\n                        sidebar = bslib::sidebar(\r\n                          shiny::selectInput(inputId = \"stage\",label = \"Stage\", choices = NULL),\r\n                          shiny::selectInput(inputId = \"block\", label = \"Block\", choices = NULL),\r\n                          shiny::selectInput(inputId = 'trait', label = \"Trait\", choices = NULL)\r\n                        ),\r\n                        bslib::layout_columns(\r\n                          bslib::card(\r\n                            fill= FALSE,\r\n                            shiny::plotOutput(\"set\")\r\n                          )\r\n                        )\r\n                      )\r\n    ),\r\n    bslib::nav_panel( #Deactivation download page ----\r\n                      \"Download\",\r\n                      bslib::layout_sidebar(\r\n                        sidebar = bslib::sidebar(\r\n                          shiny::downloadButton(\"download\", label = \"Download Deactivations\",icon = shiny::icon(\"download\"))\r\n                        ),\r\n                        bslib::layout_columns(\r\n                          bslib::card(\r\n                            DT::dataTableOutput(\"plot_deac\")\r\n                          ),\r\n                          bslib::card(\r\n                            DT::dataTableOutput(\"set_deac\")\r\n                          )\r\n                        )\r\n                      )\r\n    )\r\n  )\r\n#Server-------------------------------------------------------------------\r\nserver <- function(input, output, session){\r\n  #Apply theme to figures----\r\n  thematic::thematic_shiny()\r\n  options(shiny.maxRequestSize=100*1024^2)\r\n  #Data upload ------\r\n  raw_data <- shiny::reactive({\r\n    req(input$upload)\r\n    ext <- tools::file_ext(input$upload$name)\r\n    switch(ext,\r\n           csv = vroom::vroom(input$upload$datapath, delim = \",\",\r\n                              col_types = c(set_name = \"f\", pedigree= 'f')),\r\n           tsv = vroom::vroom(input$upload$datapath, delim = \"\\t\",\r\n                              col_types = c(set_name = \"f\", pedigree= 'f')),\r\n           validate(\"Invalid file; Please upload a .csv or .tsv file\"))\r\n  })\r\n  #Data wrangling\r\n  #Removing Plot deactivations and correcting other deactivation----\r\n  clean_data <-\r\n    shiny::reactive({\r\n      raw_data() %>%\r\n        dplyr::filter(is.na(.data[[\"plot_deactivated\"]])) %>%\r\n        dplyr::mutate(ans_deac= dplyr::if_else(.data[['isdeactivated']]== TRUE, TRUE, FALSE, missing= FALSE)) %>%\r\n        dplyr::mutate(dsr_deac= dplyr::if_else(.data[['isdeactivated_dsr']]== TRUE, TRUE, FALSE, missing= FALSE)) %>%\r\n        dplyr::mutate(qaqc_deac= dplyr::if_else(.data[['isdeactivated_qaqc']]== TRUE, TRUE, FALSE, missing= FALSE))\r\n    })\r\n  #Filtering data (only Checks for SC2)----\r\n  analysed_data <-\r\n    shiny::reactive({\r\n      clean_data() %>%\r\n        dplyr::filter(!is.na(.data[[\"value\"]])) %>%\r\n        dplyr::filter(ifelse (.data[[\"crop_material_stage\"]]== \"Screening 2\", .data[[\"iscontrol\"]]== TRUE, .data[[\"iscontrol\"]] %in% c(TRUE, FALSE))) %>%\r\n        dplyr::filter(.data[[\"block_name\"]]== input$block, .data[['questioncode']]== input$trait)\r\n    })\r\n  #Update inputs----\r\n  #Uplpoad tabset----\r\n  #Stage\r\n  shiny::observeEvent(clean_data(), {\r\n    shiny::updateSelectInput(session, \"stage_upload\", \"Stage\", choices = sort(unique(clean_data()$crop_material_stage)))\r\n  })\r\n  \r\n  #Trait\r\n  shiny::observeEvent(raw_data(), {\r\n    shiny::updateSelectInput(session, \"trait_upload\", \"Trait\", choices = sort(unique(clean_data()$questioncode)), selected = \"GYLD\")\r\n  })\r\n  #Obs-QAQC tabset----\r\n  #Stage\r\n  shiny::observeEvent(clean_data(), {\r\n    shiny::updateSelectInput(session, \"stage\", \"Stage\", choices = sort(unique(clean_data()$crop_material_stage)))\r\n  })\r\n  #Block\r\n  shiny::observeEvent(input$stage, {\r\n    QAQC_block <- shiny::reactive({\r\n      clean_data() %>% dplyr::filter(.data[[\"crop_material_stage\"]]== input$stage)\r\n    })\r\n    shiny::updateSelectInput(session, \"block\", \"Block\", choices = sort(unique(QAQC_block()$block_name)))\r\n  })\r\n  #Trait\r\n  shiny::observeEvent(raw_data(), {\r\n    shiny::updateSelectInput(session, \"trait\", \"Trait\", choices = sort(unique(clean_data()$questioncode)), selected = \"GYLD\")\r\n  })\r\n  \r\n  #Creating analysed file for viz----------\r\n  #Model----\r\n  model <-\r\n    shiny::reactive({\r\n      lme4::lmer(value ~ pedigree + (1|set_name), REML= FALSE, data= analysed_data(), na.action = na.exclude)\r\n    })\r\n  #Residual extraction (HLMDiag)----\r\n  residual <-\r\n    shiny::reactive({\r\n      HLMdiag::hlm_resid(model(), level= 1, standardize= TRUE, include.ls= FALSE) %>%\r\n        dplyr::select(set_name, pedigree,.fitted,  .std.resid) %>%\r\n        dplyr::rename(fitted= .fitted, res_std= .std.resid)\r\n    })\r\n  #Influence diagonistics ----\r\n  #Observation level\r\n  infl_obs <-\r\n    shiny::reactive({\r\n      HLMdiag::hlm_influence(model(), level= 1, approx= TRUE) %>%\r\n        dplyr::select(set_name, pedigree, cooksd, mdffits)\r\n    })\r\n  #Set level\r\n  infl_set <-\r\n    shiny::reactive({\r\n      HLMdiag::hlm_influence(model(), level= \"set_name\") \r\n    })\r\n  #Merging with data file\r\n  analysed_output <-\r\n    shiny::reactive({\r\n      analysed_data() %>%\r\n        dplyr::left_join(residual(), keep= NULL) %>%\r\n        dplyr::left_join(infl_obs(), keep= NULL)\r\n    })\r\n  \r\n  #Setting reactive values to capture selections----\r\n  n_row <-shiny::reactive(nrow(analysed_output()))\r\n  vals <- shiny::reactiveValues(keep_rows= shiny::reactive({rep(TRUE, n_row())}), \r\n                                deactivated= NULL, \r\n                                selected= NULL)\r\n  \r\n  shiny::observeEvent(input$plot_click, {\r\n    keep_rows <- vals$keep_rows()\r\n    near_points <- shiny::nearPoints(analysed_output(), input$plot_click, allRows = TRUE, threshold = 3, maxpoints = 1)\r\n    vals$keep_rows <- shiny::reactive({xor(keep_rows, near_points$selected_)})\r\n    vals$selected <- near_points %>% dplyr::filter(selected_== TRUE)\r\n  })\r\n  shiny::observeEvent(c(input$stage, input$block, input$trait, input$reset), {\r\n    vals$keep_rows <- shiny::reactive({rep(TRUE, n_row())})\r\n  })\r\n  keep <- shiny::reactive({\r\n    analysed_output()[vals$keep_rows(), , drop= FALSE]\r\n  })\r\n  exclude <-\r\n    shiny::reactive({\r\n      analysed_output()[!vals$keep_rows(), , drop= FALSE]\r\n    })\r\n  shiny::observeEvent(input$save, {\r\n    vals$deactivated <- unique(rbind(vals$deactivated, exclude()))\r\n  })\r\n  shiny::observeEvent(input$remove, {\r\n    vals$deactivated <- NULL\r\n  })\r\n  shiny::observeEvent(input$reset, {\r\n    vals$selected <- NULL\r\n  })\r\n  #Visualizations\r\n  #Data summary----\r\n  output$summary <- \r\n    DT::renderDataTable({\r\n      clean_data() %>%\r\n        dplyr::filter(crop_material_stage== input$stage_upload,\r\n                      questioncode== input$trait_upload) %>%\r\n        dplyr::group_by(block_name) %>%\r\n        dplyr::summarise(\r\n          N= dplyr::n(),\r\n          isdeactivated= plyr::count(ans_deac),\r\n          isdeactivated_dsr= plyr::count(dsr_deac),\r\n          isdeactivated_qaqc= plyr::count(qaqc_deac)\r\n        )\r\n    })\r\n  #Residual vs Fitted ----\r\n  output$residual <-\r\n    shiny::renderPlot({\r\n      analysed_output() %>%\r\n        ggplot2::ggplot(ggplot2::aes(fitted, res_std))+\r\n        ggplot2::geom_point(ggplot2::aes(color= dsr_deac), size= 1.75, shape= 1, stroke= .5)+\r\n        ggplot2::scale_color_manual(values= c(\"#e0e0e0\", \"#4393c3\"))+\r\n        ggplot2::geom_smooth(method = 'lm', se= FALSE)+\r\n        ggplot2::geom_point(data= exclude(), color= \"#d53e4f\", size= 1)+\r\n        ggplot2::labs(title = \"Stnderdized Residuals vs Fitted\")\r\n    })\r\n  #Cooks distance plot----\r\n  output$cooksd <-\r\n    shiny::renderPlot({\r\n      keep() %>%\r\n        ggplot2::ggplot(ggplot2::aes(cooksd, res_std))+\r\n        ggplot2::geom_point(size= 2, color= \"#e0e0e0\", shape= 1, stroke= 1)+\r\n        ggplot2::geom_point(data= exclude(), color= \"#bd0026\", size= 2)+\r\n        ggplot2::labs(title = \"Cooks Distance\")\r\n    })\r\n  #Fitted vs Observed plot----\r\n  output$obs_fit <-\r\n    shiny::renderPlot({\r\n      analysed_output() %>%\r\n        ggplot2::ggplot(ggplot2::aes(.data[[\"fitted\"]], .data[[\"value\"]]))+\r\n        ggplot2::geom_point(ggplot2::aes(color= dsr_deac), size= 1.75, shape= 1, stroke= .5)+\r\n        ggplot2::scale_color_manual(values= c(\"#e0e0e0\", \"#4393c3\"))+\r\n        ggplot2::geom_smooth(method = 'lm', se= FALSE)+\r\n        ggplot2::geom_point(data= exclude(), color= '#d53e4f', size= 1)+\r\n        ggplot2::labs(title = \"Observed vs Fitted\")\r\n    })\r\n  #Raw data 1----\r\n  output$raw_data_1 <-\r\n    shiny::renderPlot({\r\n      analysed_output() %>%\r\n        ggplot2::ggplot(ggplot2::aes(.data[[\"l3_name\"]], .data[[\"value\"]]))+\r\n        ggplot2::geom_boxplot(outlier.colour = NULL)+\r\n        ggplot2::theme(axis.text.x = ggplot2::element_text(angl= 90), hjust= .5, vjust= 1)+\r\n        ggplot2::geom_point(size= 1.75, shape= 1)+\r\n        ggplot2::geom_point(data= exclude(), color= '#d53e4f',size= 1)+\r\n        ggplot2::labs(title = \"Raw Data\")\r\n    })\r\n  #Raw data 2----\r\n  output$raw_data_2 <-\r\n    shiny::renderPlot({\r\n      if(length(exclude()$pedigree) == 0){\r\n        analysed_output() %>%\r\n          ggplot2::ggplot(ggplot2::aes(.data[[\"l3_name\"]], .data[[\"value\"]]))+\r\n          ggplot2::geom_boxplot(outlier.colour = NULL, outlier.fill = NULL)+\r\n          ggplot2::theme(axis.text.x = ggplot2::element_text(angl= 90), hjust= 1, vjust= 1)+\r\n          ggplot2::geom_point(ggplot2::aes(color= dsr_deac), size= 1.5, shape= 1, stroke= .5)+\r\n          ggplot2::scale_color_manual(values= c(\"#e0e0e0\", \"#4393c3\"))\r\n      } else {\r\n        analysed_output() %>%\r\n          ggplot2::ggplot(ggplot2::aes(.data[[\"l3_name\"]], .data[[\"value\"]]))+\r\n          ggplot2::geom_boxplot(outlier.colour = NULL, outlier.fill = NULL)+\r\n          ggplot2::theme(axis.text.x = ggplot2::element_text(angl= 90))+\r\n          ggplot2::geom_point(ggplot2::aes(color= dsr_deac), size= 1.5, shape= 1, stroke= .5)+\r\n          ggplot2::scale_color_manual(values= c(\"#e0e0e0\", \"#4393c3\"))+\r\n          ggplot2::geom_point(data= analysed_output() %>% dplyr::filter(pedigree== vals$selected$pedigree), color= '#d53e4f', size= 1.5)+\r\n          ggplot2::labs(title = \"Datapoint in Locations\")\r\n      }\r\n      \r\n    })\r\n  #Viz- Set level\r\n  output$set <-\r\n    shiny::renderPlot({\r\n      infl_set() %>% \r\n        dplyr::arrange(cooksd) %>% \r\n        dplyr::mutate(name=factor(set_name, levels=set_name)) %>% \r\n        ggplot2::ggplot(ggplot2::aes(x=name, y=cooksd)) +\r\n        ggplot2::geom_segment(ggplot2::aes(x=name, xend=name, y=0, yend=cooksd)) +\r\n        ggplot2::geom_point( size=5, color=\"red\", fill= ggplot2::alpha(\"orange\", 0.3), shape=21, stroke=2)+\r\n        ggplot2::coord_flip()+\r\n        ggplot2::theme_minimal()\r\n      \r\n    })\r\n  #Plot deactivation for download\r\n  output$plot_deac <-\r\n    DT::renderDataTable({\r\n      vals$deactivated %>% \r\n        dplyr::select(crop_material_stage, entryid, setid, plot_id, \r\n                      set_name, block_name, l1_name, l2_name, l3_name,  field_name, \r\n                      isdeactivated, isdeactivated_dsr, isdeactivated_qaqc, plot_deactivated, \r\n                      pedigree, questioncode, value)\r\n    })\r\n  \r\n  output$set_deac <-\r\n    DT::renderDataTable({\r\n      if(is.null(vals$selected)){\r\n        return(NULL)\r\n      }else{\r\n        vals$selected %>% \r\n          dplyr::select(set_name, block_name, pedigree)\r\n      }\r\n    })\r\n  \r\n  output$download <- shiny::downloadHandler(\r\n    filename = function() {\r\n      paste(\"Deactivation_\", Sys.Date(), \".csv\", sep=\"\")\r\n    },\r\n    content = function(file) {\r\n      write.csv(vals$deactivated %>% \r\n                  dplyr::select(crop_material_stage, entryid, setid, plot_id, \r\n                                set_name, block_name, l1_name, l2_name, l3_name,  field_name, \r\n                                isdeactivated, isdeactivated_dsr, isdeactivated_qaqc, plot_deactivated, \r\n                                pedigree, questioncode, value), file)\r\n    }\r\n  )\r\n}\r\nshiny::shinyApp(ui = ui, server = server)","type":"text"}]
